#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "../config.h"

#extension GL_NV_mesh_shader : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require

struct SceneData
{
    mat4 viewProjMatrix;
    mat4 viewMatrix;
    mat4 viewMatrixIT;

    vec4 viewPos;
    vec4 viewDir;

    vec4 wLightPos;

    ivec2 viewport;
    vec2 viewportf;

    vec2 viewportTaskCull;
    int colorize;
    int _pad0;

    vec4 wClipPlanes[NUM_CLIPPING_PLANES];
};

// must match cadscene!
struct ObjectData
{
    mat4 worldMatrix;
    mat4 worldMatrixIT;
    mat4 objectMatrix;
    vec4 bboxMin;
    vec4 bboxMax;
    vec3 _pad0;
    float winding;
    vec4 color;
};

struct CullStats
{
    uint tasksInput;
    uint tasksOutput;
    uint meshletsInput;
    uint meshletsOutput;
    uint trisInput;
    uint trisOutput;
    uint attrInput;
    uint attrOutput;
};

#define GROUP_SIZE  WARP_SIZE

layout(local_size_x = GROUP_SIZE) in;

layout(push_constant) uniform pushConstant
{
#if !USE_PER_GEOMETRY_VIEWS
    uvec4 geometryOffsets;
#endif
    uvec4 assigns;
};
#if USE_PER_GEOMETRY_VIEWS
uvec4 geometryOffsets = uvec4(0, 0, 0, 0);
#endif

layout(std140, binding = SCENE_UBO_VIEW, set = DSET_SCENE) uniform sceneBuffer
{
    SceneData scene;
};

layout(std430, binding = SCENE_SSBO_STATS, set = DSET_SCENE) buffer statsBuffer
{
CullStats stats;
};

layout(std140, binding = 0, set = DSET_OBJECT) uniform objectBuffer
{
ObjectData object;
};

layout(std430, binding = GEOMETRY_SSBO_MESHLETDESC, set = DSET_GEOMETRY) buffer meshletDescBuffer
{
uvec4 meshletDescs[];
};
layout(std430, binding = GEOMETRY_SSBO_PRIM, set = DSET_GEOMETRY) buffer primIndexBuffer
{
uvec2 primIndices[];
};

layout(binding = GEOMETRY_TEX_IBO, set = DSET_GEOMETRY) uniform usamplerBuffer texIbo;

layout(std430, binding = 2, set = 2) buffer vertexBufferObject
{
vec3 vbo[];
};

layout(std430, binding = 5, set = 2) buffer textureBufferObject
{
float texbo[];
};

layout(std430, binding = 3, set = 2) buffer attributeBufferObject
{
float abo[];
};

//layout(std430, binding = 5, set = 2)  buffer texCoordBufferObject {
//    vec2 texbo[];
//};

// oct_ code from "A Survey of Efficient Representations for Independent Unit Vectors"
// http://jcgt.org/published/0003/02/01/paper.pdf

vec2 oct_signNotZero(vec2 v)
{
return vec2((v.x >= 0.0) ? + 1.0 : - 1.0, (v.y >= 0.0) ? + 1.0 : - 1.0);
}

vec3 oct_to_vec3(vec2 e)
{
vec3 v = vec3(e.xy, 1.0 - abs(e.x) - abs(e.y));
if(v.z < 0) v.xy = (1.0 - abs(v.yx)) * oct_signNotZero(v.xy);

return normalize(v);
}

uint getCullBits(vec4 hPos)
{
uint cullBits = 0;
cullBits |= hPos.x < - hPos.w ? 1 : 0;
cullBits |= hPos.x > hPos.w ? 2 : 0;
cullBits |= hPos.y < - hPos.w ? 4 : 0;
cullBits |= hPos.y > hPos.w ? 8 : 0;
#if NVMESHLET_CLIP_Z_SIGNED
cullBits |= hPos.z < - hPos.w ? 16 : 0;
#else
cullBits |= hPos.z < 0 ? 16 : 0;
#endif
cullBits |= hPos.z > hPos.w ? 32 : 0;
cullBits |= hPos.w <= 0 ? 64 : 0;
return cullBits;
}

vec4 getBoxCorner(vec3 bboxMin, vec3 bboxMax, int n)
{
switch(n)
{
case 0 : return vec4(bboxMin.x, bboxMin.y, bboxMin.z, 1);
case 1 : return vec4(bboxMax.x, bboxMin.y, bboxMin.z, 1);
case 2 : return vec4(bboxMin.x, bboxMax.y, bboxMin.z, 1);
case 3 : return vec4(bboxMax.x, bboxMax.y, bboxMin.z, 1);
case 4 : return vec4(bboxMin.x, bboxMin.y, bboxMax.z, 1);
case 5 : return vec4(bboxMax.x, bboxMin.y, bboxMax.z, 1);
case 6 : return vec4(bboxMin.x, bboxMax.y, bboxMax.z, 1);
case 7 : return vec4(bboxMax.x, bboxMax.y, bboxMax.z, 1);
}
}

void decodeBbox(uvec4 meshletDesc, in ObjectData object, out vec3 oBboxMin, out vec3 oBboxMax)
{
    vec3 bboxMin = unpackUnorm4x8(meshletDesc.x).xyz;
    vec3 bboxMax = unpackUnorm4x8(meshletDesc.y).xyz;

    vec3 objectExtent = (object.bboxMax.xyz - object.bboxMin.xyz);

    oBboxMin = bboxMin * objectExtent + object.bboxMin.xyz;
    oBboxMax = bboxMax * objectExtent + object.bboxMin.xyz;
}

void decodeNormalAngle(uvec4 meshletDesc, in ObjectData object, out vec3 oNormal, out float oAngle)
{
uint packedVec = (((meshletDesc.z >> 20) & 0xFF) << 0) |
    (((meshletDesc.w >> 20) & 0xFF) << 8) |
    (((meshletDesc.z >> 28)) << 16) |
    (((meshletDesc.w >> 28)) << 20);

vec3 unpackedVec = unpackSnorm4x8(packedVec).xyz;

oNormal = oct_to_vec3(unpackedVec.xy) * object.winding;
oAngle = unpackedVec.z;
}

bool earlyCull(uvec4 meshletDesc, in ObjectData object)
{
    vec3 bboxMin;
    vec3 bboxMax;
    decodeBbox(meshletDesc, object, bboxMin, bboxMax);

    vec3 oGroupNormal;
    float angle;
    decodeNormalAngle(meshletDesc, object, oGroupNormal, angle);

    vec3 wGroupNormal = normalize(mat3(object.worldMatrixIT) * oGroupNormal);
    bool backface = angle < 0;

    uint frustumBits = ~ 0;
    uint clippingBits = ~ 0;

    vec3 clipMin = vec3(100000);
    vec3 clipMax = vec3(- 100000);

    for(int n = 0;n < 8;n ++)
    {
        vec4 wPos = object.worldMatrix * getBoxCorner(bboxMin, bboxMax, n);
        vec4 hPos = scene.viewProjMatrix * wPos;
        frustumBits &= getCullBits(hPos);

        // approximate backface cone culling by testing against
        // bbox corners
        //vec3 wDir = normalize(wPos.xyz - scene.viewPos.xyz);
        vec3 wDir = normalize(scene.viewPos.xyz - wPos.xyz);
        backface = backface && (dot(wGroupNormal, wDir) < angle);
    }

    return (frustumBits != 0 || backface);
}

//////////////////////////////////////////////////////////////////////////
// INPUT

uint baseID = gl_WorkGroupID.x * GROUP_SIZE;
uint laneID = gl_LocalInvocationID.x;

//////////////////////////////////////////////////////////////////////////
// OUTPUT

taskNV out Task
{
uint baseID;
uint8_t subIDs[GROUP_SIZE];
}
OUT;

void main()
{

    bool override = false;

    // This make Jinsoku able to render meshlets from multiple models without culling them
    if(assigns.x == 3) {
        override = true;
    }

    baseID += 0; // Altering this fucks everything due to the way that LoDs are sent in.

    uvec4 desc = meshletDescs[min(baseID + laneID, assigns.y) + geometryOffsets.x];

    // implement some early culling function
    bool render = ! (baseID + laneID > assigns.y || earlyCull(desc, object));
    
    //bool render = true;

 
    // LoDs need to be remade so that they are all sent as one with the global vertex indices NOT local indices
    // TODO: doing the above will have tremendous results but the deadline is approaching fast RIP

    // The following should be done after the visibility check once the above is fixed
    // If visibility test passes then we can do LoD selection to see if this meshlet should be rendered.
    // if(assigns.w != assigns.x)
    {
        // All this is doing is checking that the LoD of the mesh is the desiredLoD.
        // TODO: This should be done on the GPU instead of done on the CPU first then sent to the GPU
        // render = false;

    }

    uvec4 vote = subgroupBallot(render);
    uint tasks = subgroupBallotBitCount(vote);
    uint voteGroup = vote.x;

    if(gl_LocalInvocationID.x == 0)
    {
            // write the number of surviving meshlets, i.e. 
            // mesh workgroups to spawn
        gl_TaskCountNV = tasks;
            // where the meshletIDs started from for this task workgroup
        OUT.baseID = baseID;
    }

    {
        // write which children survived into a compact array
        uint idxOffset = subgroupBallotExclusiveBitCount(vote);
        
        if(render)
        {
            OUT.subIDs[idxOffset] = uint8_t(gl_LocalInvocationID.x);
        }
    }
}